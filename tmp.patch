diff --git a/board.js b/board.js
index 148bdcd..b651f95 100644
--- a/board.js
+++ b/board.js
@@ -65,7 +65,7 @@ export class Board {
     const randomSymbol = () => {
       const set = new Set();
       for (const symbol of Object.values(game.inventory.symbols)) {
-        set.add(symbol.name());
+        set.add(symbol.emoji());
       }
       div.innerText = Util.randomChoose([...set]);
     };
@@ -74,7 +74,7 @@ export class Board {
       randomSymbol();
       await Util.animate(div, 'spin', 0.12 + i * 0.02);
     }
-    div.innerText = symbol.name();
+    div.innerText = symbol.emoji();
     div.removeEventListener('click', div.clickEvent);
     div.clickEvent = () => {
       Util.drawText(game.info, symbol.descriptionLong());
@@ -92,7 +92,7 @@ export class Board {
     counterDiv.innerText = '';
     await Util.animate(div, 'startSpin', 0.1);
     const symbol = this.cells[y][x];
-    div.innerText = symbol.name();
+    div.innerText = symbol.emoji();
     div.removeEventListener('click', div.clickEvent);
     div.clickEvent = () => {
       Util.drawText(game.info, symbol.descriptionLong());
@@ -193,7 +193,7 @@ export class Board {
   }
   async addSymbol(game, sym, x, y) {
     game.inventory.add(sym);
-    if (this.cells[y][x].name() === '🕳️') {
+    if (this.cells[y][x].emoji() === '🕳️') {
       const hole = this.cells[y][x];
       this.cells[y][x] = sym;
       await this.spinDivOnce(game, x, y);
@@ -235,11 +235,11 @@ export class Board {
     return coords;
   }
 
-  nextToSymbol(x, y, name) {
+  nextToSymbol(x, y, emoji) {
     const coords = [];
     this.nextToCoords(x, y).forEach((coord) => {
       const [neighborX, neighborY] = coord;
-      if (this.cells[neighborY][neighborX].name() === name) {
+      if (this.cells[neighborY][neighborX].emoji() === emoji) {
         coords.push([neighborX, neighborY]);
       }
     });
@@ -263,7 +263,7 @@ export class Board {
       return [];
     }
     return this.nextToExpr(x, y, (sym) =>
-      category_symbols.includes(sym.name())
+      category_symbols.includes(sym.emoji())
     );
   }
 
diff --git a/catalog.js b/catalog.js
index 6db88ae..3f4445a 100644
--- a/catalog.js
+++ b/catalog.js
@@ -16,12 +16,12 @@ export class Catalog {
             continue;
           }
           let sym = new value();
-          this.symbols.set(sym.name(), sym);
+          this.symbols.set(sym.emoji(), sym);
           let cats = sym.categories();
           if (cats.length > 0) {
             for (const cat of cats) {
               const old = this.categories.get(cat) || [];
-              old.push(sym.name());
+              old.push(sym.emoji());
               this.categories.set(cat, old);
             }
           }
diff --git a/main.js b/main.js
index 13a7e95..a373d07 100755
--- a/main.js
+++ b/main.js
@@ -20,7 +20,7 @@ class Inventory {
     this.symbolsDiv.replaceChildren();
     const map = new Map();
     this.symbols.forEach((symbol) => {
-      const name = symbol.name();
+      const name = symbol.emoji();
       if (!map.has(name)) {
         map.set(name, { count: 0, description: symbol.descriptionLong() });
       }
@@ -147,7 +147,7 @@ class Shop {
     for (let i = 0; i < 3; ++i) {
       const symbol = Util.randomRemove(newCatalog);
       const shopItemDiv = makeShopItem(
-        symbol.name(),
+        symbol.emoji(),
         symbol.description(),
         symbol.descriptionLong(),
         async (e) => {
@@ -411,7 +411,7 @@ class AutoGame {
               }
               if (
                 button.parentElement.parentElement.children[0].innerText ===
-                sym.name()
+                sym.emoji()
               ) {
                 button.click();
                 button.disabled = true;
diff --git a/symbol.js b/symbol.js
index c912e62..7cc17c5 100644
--- a/symbol.js
+++ b/symbol.js
@@ -7,7 +7,7 @@ export const CATEGORY_FRUIT = Symbol('Fruit');
 export const CATEGORY_VEGETABLES = Symbol('Vegetables');
 
 const luckyChance = (game, chance, x, y) => {
-  if (game.board.nextToSymbol(x, y, BullsEye.name).length > 0) {
+  if (game.board.nextToSymbol(x, y, BullsEye.emoji).length > 0) {
     return 1.0;
   }
   return chance + game.inventory.lastLuckBonus;
@@ -16,7 +16,7 @@ const chance = (game, percent, x, y) =>
   Math.random() < luckyChance(game, percent, x, y);
 
 export class Symb {
-  static name = '⬛';
+  static emoji = '⬛';
   constructor() {
     this.multiplier = 1;
     this.rarity = 0;
@@ -40,7 +40,7 @@ export class Symb {
   }
   async addMoney(game, score, x, y) {
     const value = score * this.multiplier;
-    const coords = game.board.nextToSymbol(x, y, Multiplier.name);
+    const coords = game.board.nextToSymbol(x, y, Multiplier.emoji);
     for (const coord of coords) {
       const [multX, multY] = coord;
       await Util.animate(
@@ -55,8 +55,8 @@ export class Symb {
       game.inventory.addMoney(score * this.multiplier),
     ]);
   }
-  name() {
-    return this.constructor.name;
+  emoji() {
+    return this.constructor.emoji;
   }
   reset() {
     this.multiplier = 1;
@@ -67,7 +67,7 @@ export class Symb {
 }
 
 export class Empty extends Symb {
-  static name = '⬜';
+  static emoji = '⬜';
   constructor() {
     super();
   }
@@ -88,7 +88,7 @@ export class Empty extends Symb {
 /* Gameplay symbols. */
 
 export class Balloon extends Symb {
-  static name = '🎈';
+  static emoji = '🎈';
   constructor() {
     super();
     this.rarity = 0.1;
@@ -116,7 +116,7 @@ export class Balloon extends Symb {
 }
 
 export class Bank extends Symb {
-  static name = '🏦';
+  static emoji = '🏦';
   constructor() {
     super();
     this.turns = 0;
@@ -147,7 +147,7 @@ export class Bank extends Symb {
 }
 
 export class Bell extends Symb {
-  static name = '🔔';
+  static emoji = '🔔';
   constructor() {
     super();
     this.rarity = 0.4;
@@ -182,7 +182,7 @@ export class Bell extends Symb {
 }
 
 export class Bomb extends Symb {
-  static name = '💣';
+  static emoji = '💣';
   constructor() {
     super();
     this.rarity = 0.15;
@@ -195,7 +195,7 @@ export class Bomb extends Symb {
       const coords = game.board.nextToExpr(
         x,
         y,
-        (sym) => ![Empty.name, Firefighter.name].includes(sym.name())
+        (sym) => ![Empty.emoji, Firefighter.emoji].includes(sym.emoji())
       );
       if (coords.length === 0) {
         return;
@@ -214,7 +214,7 @@ export class Bomb extends Symb {
 }
 
 export class Briefcase extends Symb {
-  static name = '💼';
+  static emoji = '💼';
   constructor() {
     super();
     this.rarity = 0.13;
@@ -242,7 +242,7 @@ export class Briefcase extends Symb {
 }
 
 export class Bubble extends Symb {
-  static name = '🫧';
+  static emoji = '🫧';
   constructor() {
     super();
     this.rarity = 0;
@@ -271,7 +271,7 @@ export class Bubble extends Symb {
 }
 
 export class Butter extends Symb {
-  static name = '🧈';
+  static emoji = '🧈';
   constructor() {
     super();
     this.rarity = 0.1;
@@ -299,7 +299,7 @@ export class Butter extends Symb {
 }
 
 export class Bug extends Symb {
-  static name = '🐛';
+  static emoji = '🐛';
   constructor() {
     super();
     this.rarity = 0.3;
@@ -346,7 +346,7 @@ export class Bug extends Symb {
 }
 
 export class BullsEye extends Symb {
-  static name = '🎯';
+  static emoji = '🎯';
   constructor() {
     super();
     this.rarity = 0.045;
@@ -363,7 +363,7 @@ export class BullsEye extends Symb {
 }
 
 export class Champagne extends Symb {
-  static name = '🍾';
+  static emoji = '🍾';
   constructor() {
     super();
     this.rarity = 0.07;
@@ -405,7 +405,7 @@ export class Champagne extends Symb {
 }
 
 export class Cherry extends Symb {
-  static name = '🍒';
+  static emoji = '🍒';
   constructor() {
     super();
     this.rarity = 0.8;
@@ -414,7 +414,7 @@ export class Cherry extends Symb {
     return new Cherry();
   }
   async score(game, x, y) {
-    const coords = game.board.nextToSymbol(x, y, Cherry.name);
+    const coords = game.board.nextToSymbol(x, y, Cherry.emoji);
     if (coords.length === 0) {
       return;
     }
@@ -435,7 +435,7 @@ export class Cherry extends Symb {
 }
 
 export class Chick extends Symb {
-  static name = '🐣';
+  static emoji = '🐣';
   constructor(timeToGrow = 3) {
     super();
     this.rarity = 0.2;
@@ -468,7 +468,7 @@ export class Chick extends Symb {
 }
 
 export class Chicken extends Symb {
-  static name = '🐔';
+  static emoji = '🐔';
   constructor() {
     super();
     this.rarity = 0.15;
@@ -506,7 +506,7 @@ export class Chicken extends Symb {
 }
 
 export class Clover extends Symb {
-  static name = '🍀';
+  static emoji = '🍀';
   constructor() {
     super();
     this.rarity = 0.21;
@@ -530,7 +530,7 @@ export class Clover extends Symb {
 }
 
 export class Cocktail extends Symb {
-  static name = '🍹';
+  static emoji = '🍹';
   constructor(cherryScore = 0) {
     super();
     this.rarity = 0.27;
@@ -549,7 +549,7 @@ export class Cocktail extends Symb {
   }
   async evaluateConsume(game, x, y) {
     const remove = async (sym, reward) => {
-      const coords = game.board.nextToSymbol(x, y, sym.name);
+      const coords = game.board.nextToSymbol(x, y, sym.emoji);
       if (coords.length === 0) {
         return;
       }
@@ -576,7 +576,7 @@ export class Cocktail extends Symb {
 }
 
 export class Coin extends Symb {
-  static name = '🪙';
+  static emoji = '🪙';
   constructor() {
     super();
     this.rarity = 1;
@@ -599,7 +599,7 @@ export class Coin extends Symb {
 }
 
 export class Corn extends Symb {
-  static name = '🌽';
+  static emoji = '🌽';
   constructor() {
     super();
     this.rarity = 0.25;
@@ -639,7 +639,7 @@ export class Corn extends Symb {
 }
 
 export class CreditCard extends Symb {
-  static name = '💳';
+  static emoji = '💳';
   constructor(turn = 0) {
     super();
     this.turn = turn;
@@ -672,7 +672,7 @@ export class CreditCard extends Symb {
 }
 
 export class CrystalBall extends Symb {
-  static name = '🔮';
+  static emoji = '🔮';
   constructor() {
     super();
     this.rarity = 0.05;
@@ -693,7 +693,7 @@ export class CrystalBall extends Symb {
 }
 
 export class Dancer extends Symb {
-  static name = '💃';
+  static emoji = '💃';
   constructor() {
     super();
     this.rarity = 0.3;
@@ -703,7 +703,7 @@ export class Dancer extends Symb {
     return new Dancer();
   }
   async score(game, x, y) {
-    const coords = game.board.nextToSymbol(x, y, MusicalNote.name);
+    const coords = game.board.nextToSymbol(x, y, MusicalNote.emoji);
     if (coords.length === 0) {
       return;
     }
@@ -721,7 +721,7 @@ export class Dancer extends Symb {
 }
 
 export class Diamond extends Symb {
-  static name = '💎';
+  static emoji = '💎';
   constructor() {
     super();
     this.rarity = 0.3;
@@ -734,7 +734,7 @@ export class Diamond extends Symb {
       Util.animate(game.board.getSymbolDiv(x, y), 'flip', 0.15),
       this.addMoney(game, 6, x, y),
     ]);
-    const coords = game.board.nextToSymbol(x, y, Diamond.name);
+    const coords = game.board.nextToSymbol(x, y, Diamond.emoji);
     if (coords.length === 0) {
       return;
     }
@@ -749,7 +749,7 @@ export class Diamond extends Symb {
 }
 
 export class Dice extends Symb {
-  static name = '🎲';
+  static emoji = '🎲';
   constructor() {
     super();
     this.rarity = 0.14;
@@ -774,7 +774,7 @@ export class Dice extends Symb {
 }
 
 export class Dragon extends Symb {
-  static name = '🐉';
+  static emoji = '🐉';
   constructor() {
     super();
     this.rarity = 0.01;
@@ -797,7 +797,7 @@ export class Dragon extends Symb {
 }
 
 export class Drums extends Symb {
-  static name = '🥁';
+  static emoji = '🥁';
   constructor() {
     super();
     this.rarity = 0.25;
@@ -828,7 +828,7 @@ export class Drums extends Symb {
 }
 
 export class Egg extends Symb {
-  static name = '🥚';
+  static emoji = '🥚';
   constructor() {
     super();
     this.rarity = 0.6;
@@ -859,7 +859,7 @@ export class Egg extends Symb {
 }
 
 export class Firefighter extends Symb {
-  static name = '🧑‍🚒';
+  static emoji = '🧑‍🚒';
   constructor() {
     super();
     this.rarity = 0.15;
@@ -868,7 +868,7 @@ export class Firefighter extends Symb {
     return new Firefighter();
   }
   async evaluateConsume(game, x, y) {
-    const coords = game.board.nextToSymbol(x, y, Bomb.name);
+    const coords = game.board.nextToSymbol(x, y, Bomb.emoji);
     if (coords.length === 0) {
       return;
     }
@@ -887,7 +887,7 @@ export class Firefighter extends Symb {
 }
 
 export class Fox extends Symb {
-  static name = '🦊';
+  static emoji = '🦊';
   constructor() {
     super();
     this.rarity = 0.25;
@@ -907,7 +907,7 @@ export class Fox extends Symb {
   }
   async evaluateConsume(game, x, y) {
     const eatNeighbor = async (neighborClass, reward) => {
-      const coords = game.board.nextToSymbol(x, y, neighborClass.name);
+      const coords = game.board.nextToSymbol(x, y, neighborClass.emoji);
       if (coords.length === 0) {
         return;
       }
@@ -937,7 +937,7 @@ export class Fox extends Symb {
 }
 
 export class Hole extends Symb {
-  static name = '🕳️';
+  static emoji = '🕳️';
   constructor() {
     super();
     this.rarity = 0.21;
@@ -957,7 +957,7 @@ export class Hole extends Symb {
 }
 
 export class MagicWand extends Symb {
-  static name = '🪄';
+  static emoji = '🪄';
   constructor() {
     super();
     this.rarity = 0.1;
@@ -973,7 +973,7 @@ export class MagicWand extends Symb {
     const nonEmptyCoords = game.board.nextToExpr(
       x,
       y,
-      (sym) => sym.name() !== Empty.name
+      (sym) => sym.emoji() !== Empty.emoji
     );
     if (nonEmptyCoords.length === 0) {
       return;
@@ -995,7 +995,7 @@ export class MagicWand extends Symb {
 }
 
 export class Mango extends Symb {
-  static name = '🥭';
+  static emoji = '🥭';
   constructor() {
     super();
     this.rarity = 0.06;
@@ -1026,7 +1026,7 @@ export class Mango extends Symb {
 }
 
 export class MoneyBag extends Symb {
-  static name = '💰';
+  static emoji = '💰';
   constructor(coins = 0) {
     super();
     this.coins = coins;
@@ -1044,7 +1044,7 @@ export class MoneyBag extends Symb {
     }
   }
   async evaluateConsume(game, x, y) {
-    const coords = game.board.nextToSymbol(x, y, Coin.name);
+    const coords = game.board.nextToSymbol(x, y, Coin.emoji);
     if (coords.length === 0) {
       return;
     }
@@ -1067,7 +1067,7 @@ export class MoneyBag extends Symb {
 }
 
 export class Moon extends Symb {
-  static name = '🌝';
+  static emoji = '🌝';
   constructor(turns = 0) {
     super();
     this.rarity = 0.28;
@@ -1099,7 +1099,7 @@ export class Moon extends Symb {
 }
 
 export class Multiplier extends Symb {
-  static name = '❎';
+  static emoji = '❎';
   constructor() {
     super();
     this.rarity = 0.07;
@@ -1111,7 +1111,7 @@ export class Multiplier extends Symb {
     const coords = game.board.nextToExpr(
       x,
       y,
-      (sym) => sym.name() !== Empty.name
+      (sym) => sym.emoji() !== Empty.emoji
     );
     if (coords.length === 0) {
       return;
@@ -1130,7 +1130,7 @@ export class Multiplier extends Symb {
 }
 
 export class MusicalNote extends Symb {
-  static name = '🎵';
+  static emoji = '🎵';
   constructor() {
     super();
     this.rarity = 0;
@@ -1161,7 +1161,7 @@ export class MusicalNote extends Symb {
 }
 
 export class Pineapple extends Symb {
-  static name = '🍍';
+  static emoji = '🍍';
   constructor() {
     super();
     this.rarity = 0.4;
@@ -1173,7 +1173,7 @@ export class Pineapple extends Symb {
     const coords = game.board.nextToExpr(
       x,
       y,
-      (sym) => sym.name() !== Empty.name
+      (sym) => sym.emoji() !== Empty.emoji
     );
     await Promise.all([
       Util.animate(game.board.getSymbolDiv(x, y), 'bounce', 0.1),
@@ -1192,7 +1192,7 @@ export class Pineapple extends Symb {
 }
 
 export class Popcorn extends Symb {
-  static name = '🍿';
+  static emoji = '🍿';
   constructor() {
     super();
     this.rarity = 0;
@@ -1202,7 +1202,7 @@ export class Popcorn extends Symb {
     return new Popcorn();
   }
   async score(game, x, y) {
-    const butter = game.board.nextToSymbol(x, y, Butter.name);
+    const butter = game.board.nextToSymbol(x, y, Butter.emoji);
     let score = 17;
     for (const b of butter) {
       score *= 3;
@@ -1232,7 +1232,7 @@ export class Popcorn extends Symb {
 }
 
 export class Record extends Symb {
-  static name = '📀';
+  static emoji = '📀';
   constructor(notes = 0) {
     super();
     this.rarity = 0.12;
@@ -1250,7 +1250,7 @@ export class Record extends Symb {
     }
   }
   async evaluateConsume(game, x, y) {
-    const coords = game.board.nextToSymbol(x, y, MusicalNote.name);
+    const coords = game.board.nextToSymbol(x, y, MusicalNote.emoji);
     if (coords.length === 0) {
       return;
     }
@@ -1273,7 +1273,7 @@ export class Record extends Symb {
 }
 
 export class Refresh extends Symb {
-  static name = '🔀';
+  static emoji = '🔀';
   constructor() {
     super();
     this.rarity = 0.05;
@@ -1294,7 +1294,7 @@ export class Refresh extends Symb {
 }
 
 export class Rock extends Symb {
-  static name = '🪨';
+  static emoji = '🪨';
   constructor() {
     super();
     this.rarity = 0.55;
@@ -1317,7 +1317,7 @@ export class Rock extends Symb {
 }
 
 export class Snail extends Symb {
-  static name = '🐌';
+  static emoji = '🐌';
   constructor() {
     super();
     this.rarity = 0.12;
@@ -1341,7 +1341,7 @@ export class Snail extends Symb {
 }
 
 export class Rocket extends Symb {
-  static name = '🚀';
+  static emoji = '🚀';
   constructor() {
     super();
     this.rarity = 0.18;
@@ -1365,7 +1365,7 @@ export class Rocket extends Symb {
 }
 
 export class ShoppingBag extends Symb {
-  static name = '🛍️';
+  static emoji = '🛍️';
   constructor() {
     super();
     this.rarity = 0.07;
@@ -1385,7 +1385,7 @@ export class ShoppingBag extends Symb {
 }
 
 export class Slots extends Symb {
-  static name = '🎰';
+  static emoji = '🎰';
   constructor() {
     super();
     this.rarity = 0.15;
@@ -1401,7 +1401,7 @@ export class Slots extends Symb {
     ]);
   }
   counter(game) {
-    return new Set(game.inventory.symbols.map((s) => s.name())).size * 2;
+    return new Set(game.inventory.symbols.map((s) => s.emoji())).size * 2;
   }
   description() {
     return '💵2 per different symbol in inventory';
@@ -1412,7 +1412,7 @@ export class Slots extends Symb {
 }
 
 export class Tree extends Symb {
-  static name = '🌳';
+  static emoji = '🌳';
   constructor() {
     super();
     this.rarity = 0.4;
@@ -1450,7 +1450,7 @@ export class Tree extends Symb {
 }
 
 export class Volcano extends Symb {
-  static name = '🌋';
+  static emoji = '🌋';
   constructor() {
     super();
     this.rarity = 0.4;
@@ -1475,7 +1475,7 @@ export class Volcano extends Symb {
 }
 
 export class Worker extends Symb {
-  static name = '👷';
+  static emoji = '👷';
   constructor() {
     super();
     this.rarity = 0.45;
@@ -1484,7 +1484,7 @@ export class Worker extends Symb {
     return new Worker();
   }
   async evaluateConsume(game, x, y) {
-    const coords = game.board.nextToSymbol(x, y, Rock.name);
+    const coords = game.board.nextToSymbol(x, y, Rock.emoji);
     if (coords.length === 0) {
       return;
     }
